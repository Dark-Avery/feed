import type { FC } from 'react';
import dayjs from 'dayjs';

import type { Arrival, Volunteer } from '~/db';
import { Text } from '~/shared/ui/typography';

import css from './vol-info.module.css';

const formatDate = (value): string => {
    return new Date(value).toLocaleString('ru', { day: 'numeric', month: 'long' });
};

const today = dayjs();

// –ü–æ–∏—Å–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –∑–∞–µ–∑–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞: –ù–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∑–∞–µ–∑–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—Ö–æ–¥–∏—Ç ¬´—Å–µ–≥–æ–¥–Ω—è¬ª. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π (–ø—Ä–æ—à–ª—ã–π –∏–ª–∏ –±—É–¥—É—â–∏–π). –ò —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É
const findTargetArrivalDates = (arrivals: Array<Arrival>): Arrival | undefined => {
    let targetArrival: Arrival | undefined;
    let isInside = false;

    arrivals.forEach((arrival) => {
        if (isInside) {
            return;
        }

        const start = dayjs(arrival.arrival_date);
        const end = dayjs(arrival.departure_date);

        // –î—Ä—É–≥–æ–π –≥–æ–¥ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
        if (!start.isSame(today, 'year')) {
            return;
        }

        // –°–µ–≥–æ–¥–Ω—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞/–æ—Ç—ä–µ–∑–¥–∞ –∏–ª–∏ –º–µ–∂–¥—É –Ω–∏–º–∏
        if (start.isSame(today, 'date') || end.isSame(today, 'date') || (start.isBefore(today) && end.isAfter(today))) {
            targetArrival = arrival;
            isInside = true;

            return;
        }

        // –ù–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–∞–µ–∑–¥–∞ - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–µ–∑–¥.
        if (!targetArrival) {
            targetArrival = arrival;
            return;
        }

        const targetArrivalStart = dayjs(targetArrival.arrival_date);
        const targetArrivalEnd = dayjs(targetArrival.departure_date);

        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–µ–∑–¥–∞ –±–ª–∏–∂–µ –∫ —Å–µ–≥–æ–¥–Ω—è - —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Ü–µ–ª–µ–≤—ã–º.
        if (today.diff(targetArrivalEnd) > today.diff(start) && today.diff(targetArrivalStart) > today.diff(start)) {
            targetArrival = arrival;
        }
    });

    return targetArrival;
};

export const VolInfo: FC<{
    vol: Volunteer;
}> = ({ vol }) => {
    const targetArrival = findTargetArrivalDates(vol.arrivals);
    const arrivalDatesText = targetArrival
        ? [targetArrival.arrival_date, targetArrival.departure_date].map(formatDate).join(' - ')
        : undefined;

    return (
        <div className={css.volInfo}>
            <Text className={css.text}>
                {vol.first_name} ({vol.name}), {vol.is_vegan ? '–í–µ–≥–∞–Ωü•¶' : '–ú—è—Å–æ–µ–¥ü•©'},{' '}
                {vol.directions.map((direction) => direction.name).join(', ')} {arrivalDatesText}
            </Text>
        </div>
    );
};
